{"version":3,"sources":["AutoComplete.js","MapChart.js","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","searchObj","displayWindow","loadCountry","country","newObj","axios","get","then","res","console","log","data","lastItem","length","Country","slicedDate","Date","slice","date","confirmed","Confirmed","deaths","Deaths","recovered","Recovered","setState","onChange","e","options","props","currentTarget","value","filter","optionName","toLowerCase","indexOf","onClick","innerText","onKeyDown","keyCode","classes","this","optionList","className","map","index","key","DisplayData","Fragment","type","placeholder","Component","newArr","memo","setTooltipContent","resp","push","AutoComplete","data-tip","projectionConfig","scale","geography","geographies","geo","rsmKey","onMouseEnter","properties","NAME","POP_EST","undefined","onMouseLeave","style","default","fill","outline","hover","pressed","App","useState","content","setContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.556bf559.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\n\r\nexport class Autocomplete extends Component {\r\n  static propTypes = {\r\n    options: PropTypes.instanceOf(Array).isRequired\r\n  };\r\n  state = {\r\n    activeOption: 0,\r\n    filteredOptions: [],\r\n    showOptions: false,\r\n    userInput: '',\r\n    searchObj: '',\r\n    displayWindow: 'none',\r\n  };\r\n\r\n\r\n displayWindow() {\r\n        let classes = \"windowView \";\r\n        classes += (this.state.displayWindow === 'block') ? \"block\" : \"none\";\r\n        return classes;\r\n}\r\n\r\nloadCountry = (country) => {\r\n let newObj = {};   \r\n const url = 'https://api.covid19api.com/dayone/country/'\r\n        \r\n            axios.get(url + country)\r\n        \r\n                .then(res => {\r\n                    console.log(res.data)\r\n                    let data = res.data;\r\n                    let newArr = [];\r\n                     \r\n                     var lastItem = data[data.length - 1];\r\n\r\n                         newObj.country = lastItem.Country;\r\n                         var slicedDate = lastItem.Date.slice(0, 10);\r\n                         newObj.date = slicedDate;\r\n                         newObj.confirmed = lastItem.Confirmed;\r\n                         newObj.deaths = lastItem.Deaths;\r\n                         newObj.recovered = lastItem.Recovered;\r\n                    \r\n                 \r\n                }) \r\n    this.setState({\r\n     \r\n      searchObj: newObj\r\n    });\r\n        \r\n   return newObj;\r\n}\r\n\r\n  onChange = (e) => {\r\n    console.log('onChanges');\r\n\r\n    const { options } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n    this.loadCountry(userInput);\r\n    const filteredOptions = options.filter(\r\n      (optionName) =>\r\n        optionName.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions,\r\n      showOptions: true,\r\n      userInput: e.currentTarget.value,\r\n      displayWindow: 'block',\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    \r\n    this.setState({\r\n      activeOption: 0,\r\n      filteredOptions: [],\r\n      showOptions: false,\r\n      userInput: e.currentTarget.innerText\r\n    });\r\n  };\r\n  onKeyDown = (e) => {\r\n    const { activeOption, filteredOptions } = this.state;\r\n\r\n    if (e.keyCode === 13) {\r\n   \r\n      this.setState({\r\n        activeOption: 0,\r\n        showOptions: false,\r\n        userInput: filteredOptions[activeOption]\r\n      });\r\n    } else if (e.keyCode === 38) {\r\n      if (activeOption === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption - 1 });\r\n    } else if (e.keyCode === 40) {\r\n      if (activeOption === filteredOptions.length - 1) {\r\n        console.log(activeOption);\r\n        return;\r\n      }\r\n      this.setState({ activeOption: activeOption + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n      \r\n     \r\n       \r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n\r\n      state: { activeOption, filteredOptions, showOptions, userInput }\r\n    } = this;\r\n    let optionList;\r\n    if (showOptions && userInput) {\r\n      if (filteredOptions.length) {\r\n        optionList = (\r\n          <ul className=\"options\">\r\n            {filteredOptions.map((optionName, index) => {\r\n              let className;\r\n              if (index === activeOption) {\r\n                className = 'option-active';\r\n              }\r\n              return (\r\n                <li className={className} key={optionName} onClick={onClick}>\r\n                  {optionName}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        optionList = (\r\n          <div className=\"no-options\">\r\n            <em>No Option!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    const DisplayData = this.state.displayWindow === 'block'  ? (\r\n                    <div className={ this.displayWindow() }>\r\n                          <p><b>Country:</b> {this.state.searchObj.country}</p>\r\n                          <p><b>Date: </b>{this.state.searchObj.date}</p>\r\n                          <p><b>Confirmed: </b>{this.state.searchObj.confirmed}</p>\r\n                          <p><b>Deaths:</b> {this.state.searchObj.deaths}</p>\r\n                          <p><b>Recovered:</b> {this.state.searchObj.recovered}</p>\r\n                    </div>\r\n                ): (''); \r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            className=\"search-box\"\r\n            onChange={onChange}\r\n            onKeyDown={onKeyDown}\r\n            value={userInput}\r\n            placeholder=\"Type a country\"\r\n          />\r\n          <input type=\"submit\" value=\"\" className=\"search-btn\" />\r\n        </div>\r\n        {optionList}\r\n       \r\n        {DisplayData}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React, { memo } from \"react\";\r\nimport axios from 'axios';\r\nimport AutoComplete from './AutoComplete';\r\nimport {\r\n  ZoomableGroup,\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst rounded = num => {\r\n  if (num > 1000000000) {\r\n    return Math.round(num / 100000000) / 10 + \"Bn\";\r\n  } else if (num > 1000000) {\r\n    return Math.round(num / 100000) / 10 + \"M\";\r\n  } else {\r\n    return Math.round(num / 100) / 10 + \"K\";\r\n  }\r\n};\r\nlet newObj = {};\r\nlet newArr = [];\r\n\r\nconst loadCountries = () => {\r\n    const URI = 'https://api.covid19api.com/countries'\r\n               axios.get(URI)\r\n        \r\n        \r\n                .then(resp => {\r\n                    \r\n                    let data = resp.data;\r\n                     for (var { Country:  country} of data) {\r\n                         newArr.push(country);\r\n                     }\r\n                     console.log(newArr);\r\n                })\r\n    \r\n}\r\n\r\nconst loadCountry = (country) => {\r\n        const url = 'https://api.covid19api.com/dayone/country/'\r\n        \r\n        \r\n        \r\n//          function removeDuplicates(newArr) {\r\n//              newArr.splice(0, newArr.length, ...(new Set(newArr)))\r\n//              \r\n//          }\r\n        \r\n       \r\n            axios.get(url + country)\r\n        \r\n        \r\n                .then(res => {\r\n                    console.log(res.data)\r\n                    let data = res.data;\r\n                    let newArr = [];\r\n                     \r\n                     var lastItem = data[data.length - 1];\r\n//                     var slicedDate = lastItem.Date.slice(0, 10);\r\n//                     console.log('last item: ' + lastItem.Country + ' ' + lastItem.Confirmed + ' ' + lastItem.Deaths + ' ' + lastItem.Recovered);\r\n                     if(lastItem.Confirmed !== undefined){\r\n                         newObj.confirmed = lastItem.Confirmed;\r\n                         newObj.deaths = lastItem.Deaths;\r\n                         newObj.recovered = lastItem.Recovered;\r\n                     }\r\n//                    for (var { Country:  country, Date: date, Confirmed: confirmed, Deaths: deaths, Recovered: recovered, Lat: Lat, Lon: Lon} of data) {\r\n//                        \r\n//\r\n//                        newObj.country = country;\r\n//                        var slicedDate = date.slice(0, 10);\r\n//                        newObj.date = slicedDate;\r\n//                        newObj.confirmed = confirmed;\r\n//                        newObj.deaths = deaths;\r\n//                        newObj.recovered = recovered;\r\n//                        var coors = [];\r\n//                        coors.push(Lon, Lat)\r\n//                        newObj.coordinates = coors;\r\n//                        newObj.markerOffset = 15;\r\n//                        //console.log(newObj)\r\n//                        newArr.push(newObj);\r\n//                        removeDuplicates(newArr);\r\n//                        console.log('data'+ country + 'date: ' + slicedDate);\r\n//                        \r\n//                    }\r\n                 \r\n                })\r\n           \r\n            \r\n        \r\n   return newObj;\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n   loadCountries() \r\n  return (\r\n      \r\n    <div className=\"container\">\r\n      <h3 className='display-4 h3 text-center'>Coronavirus Data Worldwide</h3>\r\n      \r\n      <AutoComplete \r\n        options={newArr}\r\n      />\r\n      <ComposableMap data-tip=\"\" projectionConfig={{ scale: 200 }}>\r\n        <ZoomableGroup>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n             \r\n              geographies.map(geo => (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  onMouseEnter={() => {\r\n                    const { NAME, POP_EST } = geo.properties;\r\n                    \r\n                          loadCountry(NAME);\r\n                          setTooltipContent(\r\n                            `Country: ${NAME}\r\n                            Confirmed:  ${newObj.confirmed}\r\n                            Deaths: ${newObj.deaths}` \r\n                            )\r\n                     \r\n                  }}\r\n                  onMouseLeave={() => {\r\n                    setTooltipContent(\"\");\r\n                  }}\r\n                  style={{\r\n                    default: {\r\n                      fill: \"#D6D6DA\",\r\n                      outline: \"none\"\r\n                    },\r\n                    hover: {\r\n                      fill: \"#F53\",\r\n                      outline: \"none\"\r\n                    },\r\n                    pressed: {\r\n                      fill: \"#E42\",\r\n                      outline: \"none\"\r\n                    }\r\n                  }}\r\n                />\r\n              ))\r\n   \r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(MapChart);\r\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactTooltip from \"react-tooltip\";\n\nimport \"./styles.css\";\n\nimport MapChart from \"./MapChart\";\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n    <div>\n      <MapChart setTooltipContent={setContent} />\n      <ReactTooltip>{content}</ReactTooltip>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}